// IMPORTANT: This file contains the logic which drives the Flow Calculator. Do not edit this file. Additional data can be added to the flowData.js file.

import { flowData } from './flowData.js';

document.addEventListener('DOMContentLoaded', function() {  
    //console.log(swapArrivalAndWaypoint(flowData));
    //return;

    const landingTimeCalculators = document.getElementsByClassName("flowCalculatorLandingTime");
    const feederFixTimeCalculators = document.getElementsByClassName("flowCalculatorFeederFixTime");

    // Create landing time calculators
    for (let i = 0; i < landingTimeCalculators.length; i++) {
        // Determine which aerodrome to use
        const aerodrome = landingTimeCalculators[i].getAttribute('data-aerodrome');

        // Create form elements
        if (flowData[aerodrome]) {
            CreateFormElements(aerodrome, landingTimeCalculators[i]);

            // Add event listeners
            const elementIDPrefix = aerodrome + "FlowCalculatorLandingTime";
            const ffETAInput = document.getElementById(elementIDPrefix + "FFETA");
            const aircraftSelect = document.getElementById(elementIDPrefix + "Aircraft");
            const runwaySelect = document.getElementById(elementIDPrefix + "Runway");
            const feederFixSelect = document.getElementById(elementIDPrefix + "FeederFix");
            const arrivalSelect = document.getElementById(elementIDPrefix + "Arrival");
            const speedSelect = document.getElementById(elementIDPrefix + "Speed");

            ffETAInput.addEventListener("input", function() {
                CalculateLandingTime(aerodrome);
            });
            aircraftSelect.addEventListener("change", function() {
                runwaySelect.innerHTML = GenerateRunwayOptions(aerodrome, aircraftSelect.value, runwaySelect.value);
                feederFixSelect.innerHTML = GenerateFeederFixOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value);
                arrivalSelect.innerHTML = GenerateArrivalOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value, arrivalSelect.value);
                speedSelect.innerHTML = GenerateSpeedOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value, arrivalSelect.value, speedSelect.value);
                CalculateLandingTime(aerodrome);
            });
            runwaySelect.addEventListener("change", function() {
                feederFixSelect.innerHTML = GenerateFeederFixOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value);
                arrivalSelect.innerHTML = GenerateArrivalOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value, arrivalSelect.value);
                speedSelect.innerHTML = GenerateSpeedOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value, arrivalSelect.value, speedSelect.value);
                CalculateLandingTime(aerodrome);
            });
            feederFixSelect.addEventListener("change", function() {
                arrivalSelect.innerHTML = GenerateArrivalOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value, arrivalSelect.value);
                speedSelect.innerHTML = GenerateSpeedOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value, arrivalSelect.value, speedSelect.value);
                CalculateLandingTime(aerodrome);
            });
            arrivalSelect.addEventListener("change", function() {
                speedSelect.innerHTML = GenerateSpeedOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value, arrivalSelect.value, speedSelect.value);
                CalculateLandingTime(aerodrome);
            });
            speedSelect.addEventListener("change", function() {
                CalculateLandingTime(aerodrome);
            });
        }
    }

    // Create feeder fix time calculators
    for (let i = 0; i < feederFixTimeCalculators.length; i++) {
        // Determine which aerodrome to use
        const aerodrome = feederFixTimeCalculators[i].getAttribute('data-aerodrome');

        // Create form elements
        if (aerodrome !== null) {
            CreateFormElements(aerodrome, feederFixTimeCalculators[i]);

            // Add event listeners
            const elementIDPrefix = aerodrome + "FlowCalculatorFeederFixTime";
            const landingTimeInput = document.getElementById(elementIDPrefix + "LandingTime");
            const aircraftSelect = document.getElementById(elementIDPrefix + "Aircraft");
            const runwaySelect = document.getElementById(elementIDPrefix + "Runway");
            const feederFixSelect = document.getElementById(elementIDPrefix + "FeederFix");
            const arrivalSelect = document.getElementById(elementIDPrefix + "Arrival");
            const speedSelect = document.getElementById(elementIDPrefix + "Speed");

            landingTimeInput.addEventListener("input", function() {
                CalculateFeederFixTime(aerodrome);
            });
            aircraftSelect.addEventListener("change", function() {
                runwaySelect.innerHTML = GenerateRunwayOptions(aerodrome, aircraftSelect.value, runwaySelect.value);
                feederFixSelect.innerHTML = GenerateFeederFixOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value);
                arrivalSelect.innerHTML = GenerateArrivalOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value, arrivalSelect.value);
                speedSelect.innerHTML = GenerateSpeedOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value, arrivalSelect.value, speedSelect.value);
                CalculateFeederFixTime(aerodrome);
            });
            runwaySelect.addEventListener("change", function() {
                feederFixSelect.innerHTML = GenerateFeederFixOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value);
                arrivalSelect.innerHTML = GenerateArrivalOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value, arrivalSelect.value);
                speedSelect.innerHTML = GenerateSpeedOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value, arrivalSelect.value, speedSelect.value);
                CalculateFeederFixTime(aerodrome);
            });
            feederFixSelect.addEventListener("change", function() {
                arrivalSelect.innerHTML = GenerateArrivalOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value, arrivalSelect.value);
                speedSelect.innerHTML = GenerateSpeedOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value, arrivalSelect.value, speedSelect.value);
                CalculateFeederFixTime(aerodrome);
            });
            arrivalSelect.addEventListener("change", function() {
                speedSelect.innerHTML = GenerateSpeedOptions(aerodrome, aircraftSelect.value, runwaySelect.value, feederFixSelect.value, arrivalSelect.value, speedSelect.value);
                CalculateFeederFixTime(aerodrome);
            });
            speedSelect.addEventListener("change", function() {
                CalculateFeederFixTime(aerodrome);
            });
        }
    }
});

function CreateFormElements(aerodrome, containerElement) {
    let elementIDPrefix = aerodrome;
    let formContent = "";
    let resultsRow = "";

    const prefillAircraft = RetrieveAircraftTypes(aerodrome)[0];
    const prefillRunway = RetrieveRunways(aerodrome, prefillAircraft)[0];
    const prefillFeederFix = RetrieveFeederFixes(aerodrome, prefillAircraft, prefillRunway)[0];
    const prefillArrival = RetrieveArrivals(aerodrome, prefillAircraft, prefillRunway, prefillFeederFix)[0];

    try {
        // Initial inputs
        if(containerElement.classList.contains("flowCalculatorLandingTime")) {
            elementIDPrefix += "FlowCalculatorLandingTime";
            
            formContent = `<div class="row">
            <div class="form-group">
                <label>Feeder Fix ETA:</label>
                <input id="${elementIDPrefix}FFETA" type="number" placeholder="FF ETA" min="0" max="59" step="1" placeholder="00" />
            </div>`;
            resultsRow = `<div class="row"><label style="font-size: 125%;">Landing Time: <span id="${elementIDPrefix}Result" style="color: var(--md-code-hl-string-color)"></span></label></div>`;
        } else if(containerElement.classList.contains("flowCalculatorFeederFixTime")) {
            elementIDPrefix += "FlowCalculatorFeederFixTime";
            
            formContent = `<div class="row">
            <div class="form-group">
                <label>Landing Time:</label>
                <input id="${elementIDPrefix}LandingTime" type="number" placeholder="Landing Time" min="0" max="59" step="1" placeholder="00" />
            </div>`;
            resultsRow = `<div class="row"><label style="font-size: 125%;">Feeder Fix Time: <span id="${elementIDPrefix}Result" style="color: var(--md-code-hl-string-color)"></span></label></div>`;
        }
                   
        // Aircraft types
        formContent += `<div class="form-group">
                <label>Aircraft:</label>
                <select id="${elementIDPrefix}Aircraft">`;
                    
        formContent += GenerateAircraftTypeOptions(aerodrome);
        formContent += `</select>
            </div>`;

        // Runways
        formContent += `<div class="form-group">
                <label>Runway:</label>
                <select id="${elementIDPrefix}Runway">`;

        formContent += GenerateRunwayOptions(aerodrome, prefillAircraft, null);
        formContent += `</select>
            </div>`;

        // Feeder Fixes
        formContent += `<div class="form-group">
                <label>Feeder Fix:</label>
                <select id="${elementIDPrefix}FeederFix">`;

        formContent += GenerateFeederFixOptions(aerodrome, prefillAircraft, prefillRunway, null);
        formContent += `</select>
            </div>`;

        // Arrivals
        formContent += `<div class="form-group">
                <label>Arrival:</label>
                <select id="${elementIDPrefix}Arrival">`;

        formContent += GenerateArrivalOptions(aerodrome, prefillAircraft, prefillRunway, prefillFeederFix, null);
        formContent += `</select>
            </div>`;

        // Speed options
        formContent += `<div class="form-group">
                <label>Speed:</label>
                <select id="${elementIDPrefix}Speed">`;
                    
        formContent += GenerateSpeedOptions(aerodrome, prefillAircraft, prefillRunway, prefillFeederFix, prefillArrival, null);
        formContent += `</select>
            </div>`;

        // Close row
        formContent += `</div>`;

        let form = document.createElement("form");
        form.classList.add("flowCalculator");
        form.setAttribute("autocomplete", "off");
        form.innerHTML = formContent + resultsRow;

        containerElement.appendChild(form);
    } catch (error) {
        console.error("Error creating form elements:", error);
    }
}

function RetrieveAircraftTypes(aerodrome) {
    // Returns an array of aircraft types for the selected aerodrome, sorted alphabetically
    let aircraftTypes = Object.keys(flowData[aerodrome]);
    let sortedAircraftTypes = aircraftTypes.sort((a, b) => a.localeCompare(b));

    return sortedAircraftTypes;
}

function GenerateAircraftTypeOptions(aerodrome) {
    // Returns a string of HTML options for the aircraft select element
    let aircraftOptions = "";
    const sortedAircraft = RetrieveAircraftTypes(aerodrome);

    for (let aircraft of sortedAircraft) {
        aircraftOptions += `<option value="${aircraft}">${aircraft}</option>`;
    }

    return aircraftOptions;
}

function RetrieveRunways(aerodrome, selectedAircraft) {
    // Returns an array of runways for the selected aircraft, sorted alphabetically
    let runways = Object.keys(flowData[aerodrome][selectedAircraft]);
    let sortedRunways = runways.sort((a, b) => a.localeCompare(b));

    return sortedRunways;
}

function GenerateRunwayOptions(aerodrome, selectedAircraft, previousValue) {
    // Returns a string of HTML options for the runways select element
    let runwayOptions = "";
    const sortedRunways = RetrieveRunways(aerodrome, selectedAircraft);

    for (let runway of sortedRunways) {
        let selected = "";
        if(runway === previousValue) {
            selected = "selected";
        }
        runwayOptions += `<option value="${runway}" ${selected}>${runway}</option>`;
    }

    return runwayOptions;
}

function RetrieveFeederFixes(aerodrome, selectedAircraft, selectedRunway) {
    // Returns an array of feeder fixes for the selected aircraft, and runway, sorted alphabetically
    let feeders = Object.keys(flowData[aerodrome][selectedAircraft][selectedRunway]);
    let sortedFeeders = feeders.sort((a, b) => a.localeCompare(b));

    return sortedFeeders;
}

function GenerateFeederFixOptions(aerodrome, selectedAircraft, selectedRunway, previousValue) {
    // Returns a string of HTML options for the arrivals select element
    let feederOptions = "";
    const sortedFeeders = RetrieveFeederFixes(aerodrome, selectedAircraft, selectedRunway);

    for (let feeder of sortedFeeders) {
        let selected = "";
        if(feeder === previousValue) {
            selected = "selected";
        }
        feederOptions += `<option value="${feeder}" ${selected}>${feeder}</option>`;
    }

    return feederOptions;
}

function RetrieveArrivals(aerodrome, selectedAircraft, selectedRunway, selectedFeederFix) {
    // Returns an array of arrivals for the selected aircraft and runway, sorted alphabetically
    let arrivals = Object.keys(flowData[aerodrome][selectedAircraft][selectedRunway][selectedFeederFix]);
    let sortedArrivals = arrivals.sort((a, b) => a.localeCompare(b));

    return sortedArrivals;
}

function GenerateArrivalOptions(aerodrome, selectedAircraft, selectedRunway, selectedFeederFix, previousValue) {
    // Returns a string of HTML options for the arrivals select element
    let arrivalOptions = "";
    const sortedArrivals = RetrieveArrivals(aerodrome, selectedAircraft, selectedRunway, selectedFeederFix);

    for (let arrival of sortedArrivals) {
        let selected = "";
        if(arrival === previousValue) {
            selected = "selected";
        }
        arrivalOptions += `<option value="${arrival}" ${selected}>${arrival}</option>`;
    }

    return arrivalOptions;
}

function RetrieveSpeeds(aerodrome, selectedAircraft, selectedRunway, selectedFeederFix, selectedArrival) {
    // Returns an array of speeds for the selected aircraft, runway, arrival and feeder fix, sorted alphabetically
    let speedOptions = Object.keys(flowData[aerodrome][selectedAircraft][selectedRunway][selectedFeederFix][selectedArrival]);
    let sortedSpeedOptions = speedOptions.sort((a, b) => a.localeCompare(b));

    return sortedSpeedOptions;
}

function GenerateSpeedOptions(aerodrome, selectedAircraft, selectedRunway, selectedFeederFix, selectedArrival, previousValue) {
    // Returns a string of HTML options for the speeds select element
    let speedOptions = "";
    const sortedSpeeds = RetrieveSpeeds(aerodrome, selectedAircraft, selectedRunway, selectedFeederFix, selectedArrival);

    for (let speed of sortedSpeeds) {
        let selected = "";
        if(speed === previousValue) {
            selected = "selected";
        }
        speedOptions += `<option value="${speed}" ${selected}>${speed}</option>`;
    }

    return speedOptions;
}

function CalculateLandingTime(aerodrome) {
    // Calculates the landing time and updates the UI
    try {
        const elementIDPrefix = aerodrome + "FlowCalculatorLandingTime";
        const ffETAInput = document.getElementById(elementIDPrefix + "FFETA");
        const aircraftSelect = document.getElementById(elementIDPrefix + "Aircraft");
        const runwaySelect = document.getElementById(elementIDPrefix + "Runway");
        const feederFixSelect = document.getElementById(elementIDPrefix + "FeederFix");
        const arrivalSelect = document.getElementById(elementIDPrefix + "Arrival");
        const speedSelect = document.getElementById(elementIDPrefix + "Speed");
        const resultSpan = document.getElementById(elementIDPrefix + "Result");

        // Get values from inputs
        const ffETA = parseInt(ffETAInput.value, 10);
        const selectedAircraft = aircraftSelect.value;
        const selectedRunway = runwaySelect.value;
        const selectedFeederFix = feederFixSelect.value;
        const selectedArrival = arrivalSelect.value;
        const selectedSpeed = speedSelect.value;

        // Calculate landing time
        let landingTime = flowData[aerodrome][selectedAircraft][selectedRunway][selectedFeederFix][selectedArrival][selectedSpeed] + ffETA;
        while(landingTime < 0) {
            landingTime += 60;
        }
        while(landingTime > 59) {
            landingTime -= 60;
        }

        // Display result
        if(String(landingTime) === "NaN" || landingTime == undefined || landingTime == null) {
            resultSpan.textContent = "";
        } else {
            resultSpan.textContent = `${String(landingTime).padStart(2, '0')}`;
        }
    } catch (error) {
        console.error("Error calculating landing time:", error);
        resultSpan.textContent = "Error";
    }
}

function CalculateFeederFixTime(aerodrome) {
    // Calculates the feeder fix time and updates the UI
    try {
        const elementIDPrefix = aerodrome + "FlowCalculatorFeederFixTime";
        const landingTimeInput = document.getElementById(elementIDPrefix + "LandingTime");
        const aircraftSelect = document.getElementById(elementIDPrefix + "Aircraft");
        const runwaySelect = document.getElementById(elementIDPrefix + "Runway");
        const feederFixSelect = document.getElementById(elementIDPrefix + "FeederFix");
        const arrivalSelect = document.getElementById(elementIDPrefix + "Arrival");
        const speedSelect = document.getElementById(elementIDPrefix + "Speed");
        const resultSpan = document.getElementById(elementIDPrefix + "Result");

        // Get values from inputs
        const landingTime = parseInt(landingTimeInput.value, 10);
        const selectedAircraft = aircraftSelect.value;
        const selectedRunway = runwaySelect.value;
        const selectedFeederFix = feederFixSelect.value;
        const selectedArrival = arrivalSelect.value;
        const selectedSpeed = speedSelect.value;

        // Calculate feeder fix time
        let feederFixTime = landingTime - flowData[aerodrome][selectedAircraft][selectedRunway][selectedFeederFix][selectedArrival][selectedSpeed];
        while(feederFixTime < 0) {
            feederFixTime += 60;
        }
        while(feederFixTime > 59) {
            feederFixTime -= 60;
        }

        // Display result
        if(String(feederFixTime) === "NaN" || feederFixTime == undefined || feederFixTime == null) {
            resultSpan.textContent = "";
        } else {
            resultSpan.textContent = `${String(feederFixTime).padStart(2, '0')}`;
        }
    } catch (error) {
        console.error("Error calculating feeder fix time:", error);
        resultSpan.textContent = "Error";
    }
}






function swapArrivalAndWaypoint(originalData) {
    const output = {};

    for (const airport in originalData) {
        const aircraftTypes = originalData[airport];

        for (const aircraftType in aircraftTypes) {
            const runways = aircraftTypes[aircraftType];

            for (const runway in runways) {
                const stars = runways[runway];

                for (const starName in stars) {
                    const waypoints = stars[starName];

                    for (const waypoint in waypoints) {
                        const speedData = waypoints[waypoint];

                        // Ensure structure
                        if (!output[airport]) output[airport] = {};
                        if (!output[airport][aircraftType]) output[airport][aircraftType] = {};
                        if (!output[airport][aircraftType][runway]) output[airport][aircraftType][runway] = {};
                        if (!output[airport][aircraftType][runway][waypoint]) output[airport][aircraftType][runway][waypoint] = {};

                        output[airport][aircraftType][runway][waypoint][starName] = speedData;
                    }
                }
            }
        }
    }

    return `export const flowData = ${JSON.stringify(output, null, 4)};`;
}

